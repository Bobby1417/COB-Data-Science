{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": "#Step 1: Import Libraries and Load Data\n# Import necessary libraries\nimport pandas as pd\n\n# Load the dataset\ndf = pd.read_csv('dataset - netflix1.csv')\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#Step 2: Data Cleaning\n# Handle missing values\ndf.fillna('Not Given', inplace=True)\n\n# Standardize date format\ndf['date_added'] = pd.to_datetime(df['date_added'], errors='coerce')\ndf['date_added'] = df['date_added'].dt.strftime('%d/%m/%Y')\n\n# Check for missing values after date format change\nmissing_dates = df['date_added'].isnull().sum()\n\n# Print the number of missing dates\nprint(f'Number of missing dates after format change: {missing_dates}')\n\n# Function to extract integers from duration strings\ndef extract_duration(duration):\n    try:\n        return int(''.join(filter(str.isdigit, duration)))\n    except:\n        return None\n\n# Apply the function to extract integers from duration strings\ndf['duration'] = df['duration'].apply(extract_duration)\n\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 2,
      "outputs": [
        {
          "name": "stdout",
          "text": "Number of missing dates after format change: 0\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#Step 3: Analyze and Address Outliers\n# Analyze outliers in duration\n#These outliers are values that significantly deviate from the typical range of durations. We're using the Interquartile Range (IQR) method to detect outliers.\n#Here's what each variable means:\n\n#Q1: The first quartile (25th percentile)\n#Q3: The third quartile (75th percentile)\n#IQR: The interquartile range (the range between Q3 and Q1)\n#Lower Bound: Q1 - 1.5 * IQR\n#Upper Bound: Q3 + 1.5 * IQR\nQ1 = df['duration'].quantile(0.25)\nQ3 = df['duration'].quantile(0.75)\nIQR = Q3 - Q1\nlower_bound = Q1 - 1.5 * IQR\nupper_bound = Q3 + 1.5 * IQR\n\noutliers = df[(df['duration'] < lower_bound) | (df['duration'] > upper_bound)]\n\n# Print the number of outliers\nprint(f'Number of outliers in duration: {len(outliers)}')\n\n\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 3,
      "outputs": [
        {
          "name": "stdout",
          "text": "Number of outliers in duration: 2\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# Step 4: Identify and Display Outliers\n\n# Identify outliers in duration column\nQ1_duration = df['duration'].quantile(0.25)\nQ3_duration = df['duration'].quantile(0.75)\nIQR_duration = Q3_duration - Q1_duration\nlower_bound_duration = Q1_duration - 1.5 * IQR_duration\nupper_bound_duration = Q3_duration + 1.5 * IQR_duration\n\noutliers_duration = df[(df['duration'] < lower_bound_duration) | (df['duration'] > upper_bound_duration)]\n\n# Identify outliers in release_year column\nQ1_year = df['release_year'].quantile(0.25)\nQ3_year = df['release_year'].quantile(0.75)\nIQR_year = Q3_year - Q1_year\nlower_bound_year = Q1_year - 1.5 * IQR_year\nupper_bound_year = Q3_year + 1.5 * IQR_year\n\noutliers_year = df[(df['release_year'] < lower_bound_year) | (df['release_year'] > upper_bound_year)]\n\n# Display outliers\noutliers_year\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 4,
      "outputs": [
        {
          "execution_count": 4,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     show_id     type                                title          director  \\\n4         s8    Movie                              Sankofa      Haile Gerima   \n29       s25    Movie                                Jeans        S. Shankar   \n51       s27    Movie                       Minsara Kanavu       Rajiv Menon   \n53       s23    Movie                      Avvai Shanmughi    K.S. Ravikumar   \n60       s42    Movie                                 Jaws  Steven Spielberg   \n...      ...      ...                                  ...               ...   \n8702   s8232    Movie                             The Bund         Not Given   \n8743   s8524  TV Show    The Super Mario Bros. Super Show!         Not Given   \n8746   s8542  TV Show  The Twilight Zone (Original Series)         Not Given   \n8761   s8645  TV Show                           Twin Peaks         Not Given   \n8765   s8670  TV Show                        V.R. Troopers         Not Given   \n\n            country  date_added  release_year rating  duration  \\\n4     United States  24/09/2021          1993  TV-MA       125   \n29            India  21/09/2021          1998  TV-14       166   \n51            India  21/09/2021          1997  TV-PG       147   \n53        Not Given  21/09/2021          1996  TV-PG       161   \n60    United States  16/09/2021          1975     PG       124   \n...             ...         ...           ...    ...       ...   \n8702      Hong Kong  20/09/2018          1983  TV-14       103   \n8743  United States  22/05/2016          1989  TV-Y7         1   \n8746  United States  01/07/2017          1963  TV-14         4   \n8761  United States  01/07/2017          1990  TV-14         2   \n8765  United States  01/01/2016          1995   TV-G         2   \n\n                                             listed_in  \n4     Dramas, Independent Movies, International Movies  \n29     Comedies, International Movies, Romantic Movies  \n51    Comedies, International Movies, Music & Musicals  \n53                      Comedies, International Movies  \n60          Action & Adventure, Classic Movies, Dramas  \n...                                                ...  \n8702  Action & Adventure, Dramas, International Movies  \n8743                                          Kids' TV  \n8746            Classic & Cult TV, TV Sci-Fi & Fantasy  \n8761      Classic & Cult TV, Crime TV Shows, TV Dramas  \n8765                                          Kids' TV  \n\n[717 rows x 10 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>show_id</th>\n      <th>type</th>\n      <th>title</th>\n      <th>director</th>\n      <th>country</th>\n      <th>date_added</th>\n      <th>release_year</th>\n      <th>rating</th>\n      <th>duration</th>\n      <th>listed_in</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>s8</td>\n      <td>Movie</td>\n      <td>Sankofa</td>\n      <td>Haile Gerima</td>\n      <td>United States</td>\n      <td>24/09/2021</td>\n      <td>1993</td>\n      <td>TV-MA</td>\n      <td>125</td>\n      <td>Dramas, Independent Movies, International Movies</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>s25</td>\n      <td>Movie</td>\n      <td>Jeans</td>\n      <td>S. Shankar</td>\n      <td>India</td>\n      <td>21/09/2021</td>\n      <td>1998</td>\n      <td>TV-14</td>\n      <td>166</td>\n      <td>Comedies, International Movies, Romantic Movies</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>s27</td>\n      <td>Movie</td>\n      <td>Minsara Kanavu</td>\n      <td>Rajiv Menon</td>\n      <td>India</td>\n      <td>21/09/2021</td>\n      <td>1997</td>\n      <td>TV-PG</td>\n      <td>147</td>\n      <td>Comedies, International Movies, Music &amp; Musicals</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>s23</td>\n      <td>Movie</td>\n      <td>Avvai Shanmughi</td>\n      <td>K.S. Ravikumar</td>\n      <td>Not Given</td>\n      <td>21/09/2021</td>\n      <td>1996</td>\n      <td>TV-PG</td>\n      <td>161</td>\n      <td>Comedies, International Movies</td>\n    </tr>\n    <tr>\n      <th>60</th>\n      <td>s42</td>\n      <td>Movie</td>\n      <td>Jaws</td>\n      <td>Steven Spielberg</td>\n      <td>United States</td>\n      <td>16/09/2021</td>\n      <td>1975</td>\n      <td>PG</td>\n      <td>124</td>\n      <td>Action &amp; Adventure, Classic Movies, Dramas</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>8702</th>\n      <td>s8232</td>\n      <td>Movie</td>\n      <td>The Bund</td>\n      <td>Not Given</td>\n      <td>Hong Kong</td>\n      <td>20/09/2018</td>\n      <td>1983</td>\n      <td>TV-14</td>\n      <td>103</td>\n      <td>Action &amp; Adventure, Dramas, International Movies</td>\n    </tr>\n    <tr>\n      <th>8743</th>\n      <td>s8524</td>\n      <td>TV Show</td>\n      <td>The Super Mario Bros. Super Show!</td>\n      <td>Not Given</td>\n      <td>United States</td>\n      <td>22/05/2016</td>\n      <td>1989</td>\n      <td>TV-Y7</td>\n      <td>1</td>\n      <td>Kids' TV</td>\n    </tr>\n    <tr>\n      <th>8746</th>\n      <td>s8542</td>\n      <td>TV Show</td>\n      <td>The Twilight Zone (Original Series)</td>\n      <td>Not Given</td>\n      <td>United States</td>\n      <td>01/07/2017</td>\n      <td>1963</td>\n      <td>TV-14</td>\n      <td>4</td>\n      <td>Classic &amp; Cult TV, TV Sci-Fi &amp; Fantasy</td>\n    </tr>\n    <tr>\n      <th>8761</th>\n      <td>s8645</td>\n      <td>TV Show</td>\n      <td>Twin Peaks</td>\n      <td>Not Given</td>\n      <td>United States</td>\n      <td>01/07/2017</td>\n      <td>1990</td>\n      <td>TV-14</td>\n      <td>2</td>\n      <td>Classic &amp; Cult TV, Crime TV Shows, TV Dramas</td>\n    </tr>\n    <tr>\n      <th>8765</th>\n      <td>s8670</td>\n      <td>TV Show</td>\n      <td>V.R. Troopers</td>\n      <td>Not Given</td>\n      <td>United States</td>\n      <td>01/01/2016</td>\n      <td>1995</td>\n      <td>TV-G</td>\n      <td>2</td>\n      <td>Kids' TV</td>\n    </tr>\n  </tbody>\n</table>\n<p>717 rows × 10 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# Calculate lower and upper bounds for duration\nQ1_duration = df['duration'].quantile(0.25)\nQ3_duration = df['duration'].quantile(0.75)\nIQR_duration = Q3_duration - Q1_duration\nlower_bound_duration = Q1_duration - 1.5 * IQR_duration\nupper_bound_duration = Q3_duration + 1.5 * IQR_duration\n\n# Calculate lower and upper bounds for release_year\nQ1_year = df['release_year'].quantile(0.25)\nQ3_year = df['release_year'].quantile(0.75)\nIQR_year = Q3_year - Q1_year\nlower_bound_year = Q1_year - 1.5 * IQR_year\nupper_bound_year = Q3_year + 1.5 * IQR_year\n\n# Remove outliers from duration column\ndf_cleaned_duration = df[~((df['duration'] < lower_bound_duration) | (df['duration'] > upper_bound_duration))]\n\n# Remove outliers from release_year column\ndf_cleaned = df_cleaned_duration[~((df_cleaned_duration['release_year'] < lower_bound_year) | (df_cleaned_duration['release_year'] > upper_bound_year))]\n\n# Reset index after removing outliers\ndf_cleaned.reset_index(drop=True, inplace=True)\n\n# Display the cleaned DataFrame\ndf_cleaned.head()\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 5,
      "outputs": [
        {
          "execution_count": 5,
          "output_type": "execute_result",
          "data": {
            "text/plain": "  show_id     type                             title         director  \\\n0      s1    Movie              Dick Johnson Is Dead  Kirsten Johnson   \n1      s3  TV Show                         Ganglands  Julien Leclercq   \n2      s6  TV Show                     Midnight Mass    Mike Flanagan   \n3     s14    Movie  Confessions of an Invisible Girl    Bruno Garotti   \n4      s9  TV Show     The Great British Baking Show  Andy Devonshire   \n\n          country  date_added  release_year rating  duration  \\\n0   United States  25/09/2021          2020  PG-13        90   \n1          France  24/09/2021          2021  TV-MA         1   \n2   United States  24/09/2021          2021  TV-MA         1   \n3          Brazil  22/09/2021          2021  TV-PG        91   \n4  United Kingdom  24/09/2021          2021  TV-14         9   \n\n                                           listed_in  \n0                                      Documentaries  \n1  Crime TV Shows, International TV Shows, TV Act...  \n2                 TV Dramas, TV Horror, TV Mysteries  \n3                 Children & Family Movies, Comedies  \n4                       British TV Shows, Reality TV  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>show_id</th>\n      <th>type</th>\n      <th>title</th>\n      <th>director</th>\n      <th>country</th>\n      <th>date_added</th>\n      <th>release_year</th>\n      <th>rating</th>\n      <th>duration</th>\n      <th>listed_in</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>s1</td>\n      <td>Movie</td>\n      <td>Dick Johnson Is Dead</td>\n      <td>Kirsten Johnson</td>\n      <td>United States</td>\n      <td>25/09/2021</td>\n      <td>2020</td>\n      <td>PG-13</td>\n      <td>90</td>\n      <td>Documentaries</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>s3</td>\n      <td>TV Show</td>\n      <td>Ganglands</td>\n      <td>Julien Leclercq</td>\n      <td>France</td>\n      <td>24/09/2021</td>\n      <td>2021</td>\n      <td>TV-MA</td>\n      <td>1</td>\n      <td>Crime TV Shows, International TV Shows, TV Act...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>s6</td>\n      <td>TV Show</td>\n      <td>Midnight Mass</td>\n      <td>Mike Flanagan</td>\n      <td>United States</td>\n      <td>24/09/2021</td>\n      <td>2021</td>\n      <td>TV-MA</td>\n      <td>1</td>\n      <td>TV Dramas, TV Horror, TV Mysteries</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>s14</td>\n      <td>Movie</td>\n      <td>Confessions of an Invisible Girl</td>\n      <td>Bruno Garotti</td>\n      <td>Brazil</td>\n      <td>22/09/2021</td>\n      <td>2021</td>\n      <td>TV-PG</td>\n      <td>91</td>\n      <td>Children &amp; Family Movies, Comedies</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>s9</td>\n      <td>TV Show</td>\n      <td>The Great British Baking Show</td>\n      <td>Andy Devonshire</td>\n      <td>United Kingdom</td>\n      <td>24/09/2021</td>\n      <td>2021</td>\n      <td>TV-14</td>\n      <td>9</td>\n      <td>British TV Shows, Reality TV</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# Save cleaned data to a new CSV file\ndf.to_csv('cleaned_dataset_netflix.csv', index=False)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}